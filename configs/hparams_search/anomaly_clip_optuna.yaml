# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: test/objective

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 50

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 50 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      trainer.max_epochs: choice(1, 5)
      # model.optimizer.lr: choice(0.0001, 0.001)
      # model.net.temperature: choice(0.1, 0.05)
      model.net.prompt_length: choice(8, 12, 16, 24)
      model.net.share_weight: choice(true, false)
      model.net.feature_map_idx : choice([5, 11, 17, 23], [0, 11, 23])
      # model.net.adapter.hidden_features: choice([1024])
      model.net.adapter.window_size: choice(6, 12, 24)
      model.net.adapter.depth: choice(1, 2)
      model.net.adapter.num_heads: choice(8)
      # model.net.adapter.cpb_dim: choice(64, 128, 512)
      model.net.adapter.value_only: choice(true, false)
      model.net.adapter.drop: choice(0.0, 0.1, 0.2)
      model.net.adapter.attn_drop: choice(0.0, 0.1, 0.2)
